// Prisma Schema for Person Management System
// Simplified version focusing only on Person entity

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS - DEFINITIONS
// ============================================

/// Tipos de documento de identidad válidos en Perú
enum DocumentType {
  DNI       /// Documento Nacional de Identidad
  RUC       /// Registro Único de Contribuyentes
  CE        /// Carné de Extranjería
  PASSPORT  /// Pasaporte
}

/// Estados generales para entidades del sistema
enum EntityStatus {
  ACTIVE    /// Activo
  INACTIVE  /// Inactivo
  SUSPENDED /// Suspendido
  DELETED   /// Eliminado
}

/// Roles de usuario en el sistema
enum UserRole {
  ADMIN       /// Administrador
  SELLER      /// Vendedor
  WAREHOUSE   /// Almacén
  MANAGER     /// Gerente
  CASHIER     /// Cajero
}

/// Tipos de comprobantes de venta
enum VoucherType {
  RECEIPT     /// Boleta de venta
  INVOICE     /// Factura
  SALE_NOTE   /// Nota de venta
  PROFORMA    /// Proforma
}

// ============================================
// MODELS - ENTITIES
// ============================================

/// Gestión de personas (clientes, proveedores, usuarios)
model Person {
  id              String   @id @default(uuid())
  documentType    DocumentType @map("document_type")
  documentNumber  String   @unique @map("document_number")
  names           String
  legalName       String?  @map("legal_name")
  address         String?
  phone           String?
  email           String?
  status          EntityStatus @default(ACTIVE)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  suppliers       Supplier[]
  customers       Customer[]
  users           User[]
  
  @@index([documentNumber])
  @@index([status])
  @@map("persons")
}

/// Gestión de tiendas/empresas
model Store {
  id                String   @id @default(uuid())
  businessName      String   @map("business_name")
  ruc               String   @unique
  legalName         String   @map("legal_name")
  address           String?
  phone             String?
  email             String?
  logoUrl           String?  @map("logo_url")
  status            EntityStatus @default(ACTIVE)
  registeredAt      DateTime @default(now()) @map("registered_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  users             User[]
  //products          Product[]
  suppliers         Supplier[]
  //purchases         Purchase[]
  customers         Customer[]
  //sales             Sale[]
  voucherSeries     VoucherSeries[]
  //sunatConfig       SunatConfig?
  //cashRegisters     CashRegister[]

  @@index([status])
  @@map("stores")
}

/// Categorías de productos
model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  status      EntityStatus @default(ACTIVE)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  //products    Product[]

  @@index([status])
  @@map("categories")
}

/// Gestión de clientes
model Customer {
  id              String   @id @default(uuid())
  storeId         String   @map("store_id")
  personId        String   @map("person_id")
  status          EntityStatus @default(ACTIVE)
  registeredAt    DateTime @default(now()) @map("registered_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  store           Store    @relation(fields: [storeId], references: [id])
  person          Person   @relation(fields: [personId], references: [id])
  //sales           Sale[]

  @@index([status])
  @@map("customers")
}

/// Gestión de proveedores
model Supplier {
  id            String   @id @default(uuid())
  storeId       String   @map("store_id")
  personId      String   @map("person_id")
  status        EntityStatus @default(ACTIVE)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  store         Store    @relation(fields: [storeId], references: [id])
  person        Person   @relation(fields: [personId], references: [id])
  //purchases     Purchase[]

  @@index([status])
  @@map("suppliers")
}

/// Gestión de usuarios del sistema
model User {
  id            String   @id @default(uuid())
  storeId       String   @map("store_id")
  personId      String   @map("person_id")
  email         String   @unique
  passwordHash  String   @map("password_hash")
  role          UserRole
  status        EntityStatus @default(ACTIVE)
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  store         Store    @relation(fields: [storeId], references: [id])
  person        Person   @relation(fields: [personId], references: [id])
  //sales         Sale[]
  //purchases     Purchase[]
  //inventoryMovements InventoryMovement[]
  //cashRegisters CashRegister[]

  @@index([status])
  @@index([role])
  @@map("users")
}

/// Gestión de series de comprobantes
model VoucherSeries {
  id              String   @id @default(uuid())
  storeId         String   @map("store_id")
  voucherType     VoucherType @map("voucher_type")
  series          String
  currentNumber   Int      @default(1) @map("current_number")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  store           Store    @relation(fields: [storeId], references: [id])

  @@unique([storeId, voucherType, series])
  @@map("voucher_series")
}