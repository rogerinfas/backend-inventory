// Prisma Schema for Inventory POS System
// For computer and peripherals stores

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS - DEFINITIONS
// ============================================

/// Tipos de documento de identidad válidos en Perú
enum DocumentType {
  DNI       /// Documento Nacional de Identidad
  RUC       /// Registro Único de Contribuyentes
  CE        /// Carné de Extranjería
  PASSPORT  /// Pasaporte
}

/// Estados generales para entidades del sistema
enum EntityStatus {
  ACTIVE    /// Activo
  INACTIVE  /// Inactivo
  SUSPENDED /// Suspendido
  DELETED   /// Eliminado
}

/// Roles de usuario en el sistema
enum UserRole {
  ADMIN       /// Administrador
  SELLER      /// Vendedor
  WAREHOUSE   /// Almacén
  MANAGER     /// Gerente
  CASHIER     /// Cajero
}

/// Unidades de medida para productos
enum UnitOfMeasure {
  UNIT      /// Unidad
  KILOGRAM  /// Kilogramo
  LITER     /// Litro
  METER     /// Metro
  BOX       /// Caja
  PACK      /// Paquete
  DOZEN     /// Docena
}

/// Tipos de comprobantes de venta
enum VoucherType {
  RECEIPT     /// Boleta de venta
  INVOICE     /// Factura
  SALE_NOTE   /// Nota de venta
  PROFORMA    /// Proforma
  CREDIT_NOTE /// Nota de crédito
  DEBIT_NOTE  /// Nota de débito
}

/// Métodos de pago aceptados
enum PaymentMethod {
  CASH      /// Efectivo
  CARD      /// Tarjeta
  YAPE      /// Yape
  PLIN      /// Plin
  TRANSFER  /// Transferencia bancaria
}

/// Estados de ventas
enum SaleStatus {
  PENDING   /// Pendiente
  COMPLETED /// Completada
  CANCELLED /// Cancelada
  REFUNDED  /// Reembolsada
}

/// Estados de compras
enum PurchaseStatus {
  PENDING    /// Pendiente
  REGISTERED /// Registrada
  CANCELLED  /// Cancelada
  RECEIVED   /// Recibida
}

/// Tipos de documentos de compra
enum PurchaseDocumentType {
  INVOICE /// Factura
  RECEIPT /// Recibo
  NOTE    /// Nota
  ORDER   /// Orden de compra
}

/// Estados de SUNAT
enum SunatStatus {
  PENDING  /// Pendiente
  ACCEPTED /// Aceptado
  REJECTED /// Rechazado
  ERROR    /// Error
}

/// Ambientes de SUNAT
enum SunatEnvironment {
  PRODUCTION /// Producción
  TEST       /// Pruebas
}

/// Tipos de movimientos de inventario
enum MovementType {
  ENTRY      /// Entrada
  EXIT       /// Salida
  ADJUSTMENT /// Ajuste
  RETURN     /// Devolución
  TRANSFER   /// Transferencia
  LOSS       /// Pérdida
}

/// Tipos de referencia para movimientos
enum ReferenceType {
  PURCHASE /// Compra
  SALE     /// Venta
  TRANSFER /// Transferencia
  RETURN   /// Devolución
}

/// Estados de caja registradora
enum CashRegisterStatus {
  OPEN   /// Abierta
  CLOSED /// Cerrada
  LOCKED /// Bloqueada
}

// ============================================
// MODELS - ENTITIES
// ============================================

/// Gestión de personas (clientes, proveedores, usuarios)
model Person {
  id              String   @id @default(uuid())
  documentType    DocumentType @map("document_type")
  documentNumber  String   @unique @map("document_number")
  names           String
  legalName       String?  @map("legal_name")
  address         String?
  phone           String?
  email           String?
  status          EntityStatus @default(ACTIVE)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  suppliers       Supplier[]
  customers       Customer[]
  users           User[]
  
  @@index([documentNumber])
  @@index([status])
  @@map("persons")
}

// ============================================
// STORE AND USER MANAGEMENT
// ============================================

/// Gestión de tiendas/empresas
model Store {
  id                String   @id @default(uuid())
  businessName      String   @map("business_name")
  ruc               String   @unique
  legalName         String   @map("legal_name")
  address           String?
  phone             String?
  email             String?
  logoUrl           String?  @map("logo_url")
  status            EntityStatus @default(ACTIVE)
  registeredAt      DateTime @default(now()) @map("registered_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  users             User[]
  products          Product[]
  suppliers         Supplier[]
  purchases         Purchase[]
  customers         Customer[]
  sales             Sale[]
  voucherSeries     VoucherSeries[]
  sunatConfig       SunatConfig?
  cashRegisters     CashRegister[]

  @@index([status])
  @@map("stores")
}

/// Gestión de usuarios del sistema
model User {
  id            String   @id @default(uuid())
  storeId       String   @map("store_id")
  personId      String   @map("person_id")
  email         String   @unique
  passwordHash  String   @map("password_hash")
  role          UserRole
  status        EntityStatus @default(ACTIVE)
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  store         Store    @relation(fields: [storeId], references: [id])
  person        Person   @relation(fields: [personId], references: [id])
  sales         Sale[]
  purchases     Purchase[]
  inventoryMovements InventoryMovement[]
  cashRegisters CashRegister[]

  @@index([status])
  @@index([role])
  @@map("users")
}

// ============================================
// CATALOGS AND PRODUCTS
// ============================================

/// Categorías de productos
model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  status      EntityStatus @default(ACTIVE)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  products    Product[]

  @@index([status])
  @@map("categories")
}

/// Marcas de productos
model Brand {
  id        String   @id @default(uuid())
  name      String
  status    EntityStatus @default(ACTIVE)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  products  Product[]

  @@index([status])
  @@map("brands")
}

/// Gestión de productos/inventario
model Product {
  id            String   @id @default(uuid())
  storeId       String   @map("store_id")
  categoryId    String?  @map("category_id")
  brandId       String?  @map("brand_id")
  sku           String   @unique @map("sku_code")
  name          String
  description   String?
  purchasePrice Float    @map("purchase_price")
  salePrice     Float    @map("sale_price")
  currentStock  Int      @default(0) @map("current_stock")
  minimumStock  Int      @default(5) @map("minimum_stock")
  maximumStock  Int?     @map("maximum_stock")
  unitOfMeasure UnitOfMeasure @default(UNIT) @map("unit_of_measure")
  imageUrl      String?  @map("image_url")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  store         Store    @relation(fields: [storeId], references: [id])
  category      Category? @relation(fields: [categoryId], references: [id])
  brand         Brand?   @relation(fields: [brandId], references: [id])
  purchaseDetails PurchaseDetail[]
  saleDetails   SaleDetail[]
  inventoryMovements InventoryMovement[]

  @@index([sku])
  @@index([isActive])
  @@index([storeId])
  @@map("products")
}

// ============================================
// SUPPLIERS AND PURCHASES
// ============================================

/// Gestión de proveedores
model Supplier {
  id            String   @id @default(uuid())
  storeId       String   @map("store_id")
  personId      String   @map("person_id")
  status        EntityStatus @default(ACTIVE)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  store         Store    @relation(fields: [storeId], references: [id])
  person        Person   @relation(fields: [personId], references: [id])
  purchases     Purchase[]

  @@index([status])
  @@map("suppliers")
}

/// Gestión de compras
model Purchase {
  id              String   @id @default(uuid())
  storeId         String   @map("store_id")
  supplierId      String   @map("supplier_id")
  userId          String   @map("user_id")
  documentNumber  String?  @map("document_number")
  documentType    PurchaseDocumentType @default(INVOICE) @map("document_type")
  purchaseDate    DateTime @map("purchase_date")
  subtotal        Float
  tax             Float    @default(0)
  discount        Float    @default(0)
  total           Float
  status          PurchaseStatus @default(REGISTERED)
  notes           String?
  registeredAt    DateTime @default(now()) @map("registered_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  store           Store    @relation(fields: [storeId], references: [id])
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  details         PurchaseDetail[]

  @@index([status])
  @@index([purchaseDate])
  @@map("purchases")
}

/// Detalles de compras
model PurchaseDetail {
  id          String   @id @default(uuid())
  purchaseId  String   @map("purchase_id")
  productId   String   @map("product_id")
  quantity    Int
  unitPrice   Float    @map("unit_price")
  discount    Float    @default(0)
  
  // Relations
  purchase    Purchase @relation(fields: [purchaseId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@map("purchase_details")
}

// ============================================
// CUSTOMERS AND SALES
// ============================================

/// Gestión de clientes
model Customer {
  id              String   @id @default(uuid())
  storeId         String   @map("store_id")
  personId        String   @map("person_id")
  status          EntityStatus @default(ACTIVE)
  registeredAt    DateTime @default(now()) @map("registered_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  store           Store    @relation(fields: [storeId], references: [id])
  person          Person   @relation(fields: [personId], references: [id])
  sales           Sale[]

  @@index([status])
  @@map("customers")
}

/// Gestión de ventas
model Sale {
  id                String   @id @default(uuid())
  storeId           String   @map("store_id")
  customerId        String?  @map("customer_id")
  userId            String   @map("user_id")
  voucherType       VoucherType @map("voucher_type")
  voucherSeries     String   @map("voucher_series")
  voucherNumber     String   @map("voucher_number")
  issuedAt          DateTime @map("issued_at")
  subtotal          Float
  tax               Float    @default(0)
  discount          Float    @default(0)
  total             Float
  paymentMethod     PaymentMethod @map("payment_method")
  status            SaleStatus @default(COMPLETED)
  sunatStatus       SunatStatus @default(PENDING) @map("sunat_status")
  sunatHash         String?  @map("sunat_hash")
  sunatXml          String?  @map("sunat_xml")
  notes             String?
  registeredAt      DateTime @default(now()) @map("registered_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  store             Store    @relation(fields: [storeId], references: [id])
  customer          Customer? @relation(fields: [customerId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
  details           SaleDetail[]

  @@unique([voucherSeries, voucherNumber])
  @@index([issuedAt])
  @@index([status])
  @@index([paymentMethod])
  @@map("sales")
}

/// Detalles de ventas
model SaleDetail {
  id          String   @id @default(uuid())
  saleId      String   @map("sale_id")
  productId   String   @map("product_id")
  quantity    Int
  unitPrice   Float    @map("unit_price")
  discount    Float    @default(0)
  
  // Relations
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@map("sale_details")
}

// ============================================
// INVENTORY AND MOVEMENTS
// ============================================

/// Gestión de movimientos de inventario
model InventoryMovement {
  id              String   @id @default(uuid())
  productId       String   @map("product_id")
  userId          String   @map("user_id")
  movementType    MovementType @map("movement_type")
  quantity        Int
  previousStock   Int      @map("previous_stock")
  newStock        Int      @map("new_stock")
  reason          String?  @map("reason")
  referenceId     String?  @map("reference_id")
  referenceType   ReferenceType? @map("reference_type")
  movedAt         DateTime @default(now()) @map("moved_at")
  
  // Relations
  product         Product  @relation(fields: [productId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([movedAt])
  @@index([productId])
  @@index([movementType])
  @@index([referenceType])
  @@map("inventory_movements")
}

// ============================================
// CONFIGURATION AND ADMINISTRATION
// ============================================

/// Gestión de series de comprobantes
model VoucherSeries {
  id              String   @id @default(uuid())
  storeId         String   @map("store_id")
  voucherType     VoucherType @map("voucher_type")
  series          String
  currentNumber   Int      @default(1) @map("current_number")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  store           Store    @relation(fields: [storeId], references: [id])

  @@unique([storeId, voucherType, series])
  @@map("voucher_series")
}

/// Configuración de SUNAT
model SunatConfig { 
  id                  String   @id @default(uuid())
  storeId             String   @unique @map("store_id")
  ruc                 String
  solUsername         String   @map("sol_username")
  solPassword         String   @map("sol_password")
  digitalCertificate  Bytes?   @map("digital_certificate")
  certificatePassword String?  @map("certificate_password")
  apiUrl              String?  @map("sunat_api_url")
  environment         SunatEnvironment @default(TEST) @map("environment")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  // Relations
  store               Store    @relation(fields: [storeId], references: [id])

  @@map("sunat_config")
}

/// Gestión de caja registradora
model CashRegister {
  id              String   @id @default(uuid())
  storeId         String   @map("store_id")
  userId          String   @map("user_id")
  openedAt        DateTime @map("opened_at")
  closedAt        DateTime? @map("closed_at")
  initialAmount   Float    @map("initial_amount")
  salesAmount     Float    @default(0) @map("sales_amount")
  finalAmount     Float?   @map("final_amount")
  difference      Float?   @map("difference")
  status          CashRegisterStatus @default(OPEN)
  observations    String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  store           Store    @relation(fields: [storeId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([openedAt])
  @@index([status])
  @@map("cash_registers")
}